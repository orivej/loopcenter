// generated by Fast Light User Interface Designer (fluid) version 1.0108

#ifndef jlfltk_h
#define jlfltk_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Spinner.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Progress.H>
#include <FL/Fl_Box.H>
#include "Looper.h"


class Key_Window : public Fl_Double_Window {

 public:
  Key_Window(int x, int y, char *lab);
  void setButtons(void);

  Looper *theLooper;
  int handle(int event);
  Fl_Spinner *metroTempo;
  Fl_Button *tempoTap;
  Fl_Slider *metroVol;
  Fl_Slider *recordVol;
  Fl_Spinner *bpMeasure;
  Fl_Spinner *phraseSetter;
  Fl_Light_Button *leftButton;
  Fl_Light_Button *rightButton;
};

class LooperUI {

  Looper *theLooper;

  void setButtons(void);

public:
  LooperUI(Looper *inLooper);
  void updateStuff(void);
  Key_Window *LoopCenter;
  Fl_Spinner *metroTempo;
private:
  void cb_metroTempo_i(Fl_Spinner*, void*);
  static void cb_metroTempo(Fl_Spinner*, void*);
public:
  Fl_Slider *metroVol;
private:
  void cb_metroVol_i(Fl_Slider*, void*);
  static void cb_metroVol(Fl_Slider*, void*);
public:
  Fl_Spinner *bpMeasure;
private:
  void cb_bpMeasure_i(Fl_Spinner*, void*);
  static void cb_bpMeasure(Fl_Spinner*, void*);
public:
  Fl_Spinner *phraseSetter;
private:
  void cb_phraseSetter_i(Fl_Spinner*, void*);
  static void cb_phraseSetter(Fl_Spinner*, void*);
public:
  Fl_Button *phraseSaver;
private:
  void cb_phraseSaver_i(Fl_Button*, void*);
  static void cb_phraseSaver(Fl_Button*, void*);
public:
  Fl_Light_Button *leftButton;
private:
  void cb_leftButton_i(Fl_Light_Button*, void*);
  static void cb_leftButton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *rightButton;
private:
  void cb_rightButton_i(Fl_Light_Button*, void*);
  static void cb_rightButton(Fl_Light_Button*, void*);
public:
  Fl_Value_Output *measureNum;
  Fl_Slider *recordVol;
  Fl_Box *status;
private:
  void cb_recordVol_i(Fl_Slider*, void*);
  static void cb_recordVol(Fl_Slider*, void*);
public:
  Fl_Progress *recordLevel;
  Fl_Progress *measurePosition;
  Fl_Button *deleteLastDub;
private:
  void cb_deleteLastDub_i(Fl_Button*, void*);
  static void cb_deleteLastDub(Fl_Button*, void*);
public:
  Fl_Button *deleteAllDubs;
private:
  void cb_deleteAllDubs_i(Fl_Button*, void*);
  static void cb_deleteAllDubs(Fl_Button*, void*);
public:
  Fl_Button *tempoTapper;
private:
  void cb_tempoTapper_i(Fl_Button*, void*);
  static void cb_tempoTapper(Fl_Button*, void*);
public:
  Fl_Button *phraseEraser;
private:
  void cb_phraseEraser_i(Fl_Button*, void*);
  static void cb_phraseEraser(Fl_Button*, void*);
};

class Updater : public Thread {


 protected:
  void Execute(void);

 public:
  LooperUI *looperUI;

};

#endif
